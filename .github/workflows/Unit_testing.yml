name: Unit testing Detections (unit + parser)

on:
  push:
    branches: [ main ]
    paths:
      - 'detections/**'
      - 'tests/**'
      - '.github/workflows/**'
  pull_request:
    paths:
      - 'detections/**'
      - 'tests/**'
      - '.github/workflows/**'
  workflow_dispatch: {}

jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          else
            # minimal deps if requirements.txt is missing
            python -m pip install PyYAML pytest splunk-sdk requests
          fi
          python -m pip list

      - name: Run unit tests
        run: |
          python -m pytest -q tests/unit

  parser:
    needs: unit
    # only run if Splunk secrets exist
    if: ${{ secrets.SPLUNK_HOST != '' && secrets.SPLUNK_USERNAME != '' && secrets.SPLUNK_PASSWORD != '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          else
            python -m pip install PyYAML pytest splunk-sdk requests
          fi
          python -m pip list

      - name: Parser checks for detections (connect to Splunk)
        env:
          SPLUNK_HOST: ${{ secrets.SPLUNK_HOST }}
          SPLUNK_PORT: ${{ secrets.SPLUNK_PORT }}
          SPLUNK_USERNAME: ${{ secrets.SPLUNK_USERNAME }}
          SPLUNK_PASSWORD: ${{ secrets.SPLUNK_PASSWORD }}
          SPLUNK_VERIFY: 'false'
          SPLUNK_APP: attack_range_reporting
          SPLUNK_OWNER: nobody
        run: |
          python - <<'PY'
          import yaml, subprocess, shlex
          from pathlib import Path

          det_dir = Path('detections')
          if not det_dir.exists():
              raise SystemExit("No 'detections/' directory found.")

          failed = False
          for f in sorted(det_dir.glob('*.yml')):
              with open(f, 'r', encoding='utf-8') as fh:
                  det = yaml.safe_load(fh) or {}
              search = det.get('search', '')
              if not search:
                  print(f"SKIP (no search): {f}")
                  continue
              print(f"==> Parser: {f}")
              rc = subprocess.call(f"python scripts/test_parser.py {shlex.quote(search)}", shell=True)
              if rc != 0:
                  print("Parser FAILED for", f)
                  failed = True

          if failed:
              raise SystemExit(2)
          print("All parser checks passed.")
          PY
