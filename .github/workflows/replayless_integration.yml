name: Manual integration (smoke + perf)

on:
  workflow_dispatch:
    inputs:
      detection_file:
        description: 'Path to detection YAML'
        required: true
        default: 'detections/create_local_or_domain_user.yml'

jobs:
  smoke-and-perf:
    # Use self-hosted if GitHub runners can't reach your Splunk on 8089.
    # Otherwise switch to ubuntu-latest.
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          # install from requirements if present (don't fail if the file is missing)
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          fi
          # ensure core tools are installed no matter what
          python -m pip install --upgrade pytest PyYAML splunk-sdk requests
          # prove they’re importable
          python - <<'PY'
          import sys
          print("Python:", sys.version)
          import pytest, yaml, splunklib, requests
          print("Imports OK:", pytest.__version__, yaml.__version__)
          PY
          python -m pip list
         

      - name: Connectivity smoke (server/info)
        env:
          SPLUNK_HOST: ${{ secrets.SPLUNK_HOST }}
          SPLUNK_PORT: ${{ secrets.SPLUNK_PORT }}
          SPLUNK_USERNAME: ${{ secrets.SPLUNK_USERNAME }}
          SPLUNK_PASSWORD: ${{ secrets.SPLUNK_PASSWORD }}
          SPLUNK_VERIFY: 'false'
          SPLUNK_APP: attack_range_reporting
          SPLUNK_OWNER: nobody
        run: |
          python - <<'PY'
          from tools.splunk_client import connect
          svc = connect()
          print("Connected ✅", "Server:", svc.info.get("serverName"), "Version:", svc.info.get("version"))
          PY

      - name: Parser-only check
        env:
          SPLUNK_HOST: ${{ secrets.SPLUNK_HOST }}
          SPLUNK_PORT: ${{ secrets.SPLUNK_PORT }}
          SPLUNK_USERNAME: ${{ secrets.SPLUNK_USERNAME }}
          SPLUNK_PASSWORD: ${{ secrets.SPLUNK_PASSWORD }}
          SPLUNK_VERIFY: 'false'
          SPLUNK_APP: attack_range_reporting
          SPLUNK_OWNER: nobody
        run: |
          python - <<'PY'
          import yaml, sys, subprocess, shlex
          dfile = "${{ github.event.inputs.detection_file }}"
          det = yaml.safe_load(open(dfile, 'r', encoding='utf-8'))
          search = det.get('search', '')
          if not search:
              raise SystemExit("No search in detection file.")
          print("Parser check for", dfile)
          rc = subprocess.call(f"python scripts/test_parser.py {shlex.quote(search)}", shell=True)
          if rc != 0:
              raise SystemExit(rc)
          print("Parser OK")
          PY

      - name: Run detection (smoke)
        env:
          SPLUNK_HOST: ${{ secrets.SPLUNK_HOST }}
          SPLUNK_PORT: ${{ secrets.SPLUNK_PORT }}
          SPLUNK_USERNAME: ${{ secrets.SPLUNK_USERNAME }}
          SPLUNK_PASSWORD: ${{ secrets.SPLUNK_PASSWORD }}
          SPLUNK_VERIFY: 'false'
          SPLUNK_APP: attack_range_reporting
          SPLUNK_OWNER: nobody
        run: |
          python scripts/run_one_detection.py "${{ github.event.inputs.detection_file }}"

      - name: Performance test
        env:
          SPLUNK_HOST: ${{ secrets.SPLUNK_HOST }}
          SPLUNK_PORT: ${{ secrets.SPLUNK_PORT }}
          SPLUNK_USERNAME: ${{ secrets.SPLUNK_USERNAME }}
          SPLUNK_PASSWORD: ${{ secrets.SPLUNK_PASSWORD }}
          SPLUNK_VERIFY: 'false'
          PERF_MAX_RUNTIME_SEC: "15"
        run: |
          pytest -q -m performance tests/integration/test_performance.py
